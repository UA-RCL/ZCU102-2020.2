-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ZIP_HLS_accel is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ZIP_HLS_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ZIP_HLS_accel_ZIP_HLS_accel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.606400,HLS_SYN_LAT=2743,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=0,HLS_SYN_FF=4193,HLS_SYN_LUT=3097,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal op : STD_LOGIC_VECTOR (31 downto 0);
    signal op_read_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_fu_111_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_reg_121 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_wrapper_zip_hw_fu_76_ap_start : STD_LOGIC;
    signal grp_wrapper_zip_hw_fu_76_ap_done : STD_LOGIC;
    signal grp_wrapper_zip_hw_fu_76_ap_idle : STD_LOGIC;
    signal grp_wrapper_zip_hw_fu_76_ap_ready : STD_LOGIC;
    signal grp_wrapper_zip_hw_fu_76_INPUT_STREAM_TREADY : STD_LOGIC;
    signal grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TREADY : STD_LOGIC;
    signal grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_wrapper_zip_hw_fu_76_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal regslice_both_OUTPUT_STREAM_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_V_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_STREAM_TVALID_int_regslice : STD_LOGIC;
    signal INPUT_STREAM_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT_STREAM_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_user_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_STREAM_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_last_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_STREAM_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_id_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_STREAM_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal INPUT_STREAM_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT_STREAM_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT_STREAM_V_dest_V_U_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_STREAM_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ZIP_HLS_accel_wrapper_zip_hw IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        size : IN STD_LOGIC_VECTOR (30 downto 0);
        op : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ZIP_HLS_accel_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        size : OUT STD_LOGIC_VECTOR (31 downto 0);
        op : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component ZIP_HLS_accel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    ctrl_s_axi_U : component ZIP_HLS_accel_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        size => size,
        op => op,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    grp_wrapper_zip_hw_fu_76 : component ZIP_HLS_accel_wrapper_zip_hw
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_wrapper_zip_hw_fu_76_ap_start,
        ap_done => grp_wrapper_zip_hw_fu_76_ap_done,
        ap_idle => grp_wrapper_zip_hw_fu_76_ap_idle,
        ap_ready => grp_wrapper_zip_hw_fu_76_ap_ready,
        INPUT_STREAM_TDATA => INPUT_STREAM_TDATA_int_regslice,
        INPUT_STREAM_TVALID => INPUT_STREAM_TVALID_int_regslice,
        INPUT_STREAM_TREADY => grp_wrapper_zip_hw_fu_76_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => INPUT_STREAM_TKEEP_int_regslice,
        INPUT_STREAM_TSTRB => INPUT_STREAM_TSTRB_int_regslice,
        INPUT_STREAM_TUSER => INPUT_STREAM_TUSER_int_regslice,
        INPUT_STREAM_TLAST => INPUT_STREAM_TLAST_int_regslice,
        INPUT_STREAM_TID => INPUT_STREAM_TID_int_regslice,
        INPUT_STREAM_TDEST => INPUT_STREAM_TDEST_int_regslice,
        OUTPUT_STREAM_TDATA => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TDEST,
        size => empty_reg_121,
        op => op_read_reg_116);

    regslice_both_INPUT_STREAM_V_data_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TDATA,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_V_data_V_U_ack_in,
        data_out => INPUT_STREAM_TDATA_int_regslice,
        vld_out => INPUT_STREAM_TVALID_int_regslice,
        ack_out => INPUT_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_STREAM_V_data_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_V_keep_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TKEEP,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_V_keep_V_U_ack_in,
        data_out => INPUT_STREAM_TKEEP_int_regslice,
        vld_out => regslice_both_INPUT_STREAM_V_keep_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_STREAM_V_keep_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_V_strb_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TSTRB,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_V_strb_V_U_ack_in,
        data_out => INPUT_STREAM_TSTRB_int_regslice,
        vld_out => regslice_both_INPUT_STREAM_V_strb_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_STREAM_V_strb_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_V_user_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TUSER,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_V_user_V_U_ack_in,
        data_out => INPUT_STREAM_TUSER_int_regslice,
        vld_out => regslice_both_INPUT_STREAM_V_user_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_STREAM_V_user_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_V_last_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TLAST,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_V_last_V_U_ack_in,
        data_out => INPUT_STREAM_TLAST_int_regslice,
        vld_out => regslice_both_INPUT_STREAM_V_last_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_STREAM_V_last_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_V_id_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TID,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_V_id_V_U_ack_in,
        data_out => INPUT_STREAM_TID_int_regslice,
        vld_out => regslice_both_INPUT_STREAM_V_id_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_STREAM_V_id_V_U_apdone_blk);

    regslice_both_INPUT_STREAM_V_dest_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT_STREAM_TDEST,
        vld_in => INPUT_STREAM_TVALID,
        ack_in => regslice_both_INPUT_STREAM_V_dest_V_U_ack_in,
        data_out => INPUT_STREAM_TDEST_int_regslice,
        vld_out => regslice_both_INPUT_STREAM_V_dest_V_U_vld_out,
        ack_out => INPUT_STREAM_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT_STREAM_V_dest_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_V_data_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TDATA,
        vld_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TVALID,
        ack_in => OUTPUT_STREAM_TREADY_int_regslice,
        data_out => OUTPUT_STREAM_TDATA,
        vld_out => regslice_both_OUTPUT_STREAM_V_data_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_V_data_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_V_keep_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TKEEP,
        vld_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TVALID,
        ack_in => regslice_both_OUTPUT_STREAM_V_keep_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TKEEP,
        vld_out => regslice_both_OUTPUT_STREAM_V_keep_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_V_keep_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_V_strb_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TSTRB,
        vld_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TVALID,
        ack_in => regslice_both_OUTPUT_STREAM_V_strb_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TSTRB,
        vld_out => regslice_both_OUTPUT_STREAM_V_strb_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_V_strb_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_V_user_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TUSER,
        vld_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TVALID,
        ack_in => regslice_both_OUTPUT_STREAM_V_user_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TUSER,
        vld_out => regslice_both_OUTPUT_STREAM_V_user_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_V_user_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_V_last_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TLAST,
        vld_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TVALID,
        ack_in => regslice_both_OUTPUT_STREAM_V_last_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TLAST,
        vld_out => regslice_both_OUTPUT_STREAM_V_last_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_V_last_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_V_id_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TID,
        vld_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TVALID,
        ack_in => regslice_both_OUTPUT_STREAM_V_id_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TID,
        vld_out => regslice_both_OUTPUT_STREAM_V_id_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_V_id_V_U_apdone_blk);

    regslice_both_OUTPUT_STREAM_V_dest_V_U : component ZIP_HLS_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TDEST,
        vld_in => grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TVALID,
        ack_in => regslice_both_OUTPUT_STREAM_V_dest_V_U_ack_in_dummy,
        data_out => OUTPUT_STREAM_TDEST,
        vld_out => regslice_both_OUTPUT_STREAM_V_dest_V_U_vld_out,
        ack_out => OUTPUT_STREAM_TREADY,
        apdone_blk => regslice_both_OUTPUT_STREAM_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_wrapper_zip_hw_fu_76_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_wrapper_zip_hw_fu_76_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_wrapper_zip_hw_fu_76_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_wrapper_zip_hw_fu_76_ap_ready = ap_const_logic_1)) then 
                    grp_wrapper_zip_hw_fu_76_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_reg_121 <= empty_fu_111_p1;
                op_read_reg_116 <= op;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_wrapper_zip_hw_fu_76_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state4, regslice_both_OUTPUT_STREAM_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_wrapper_zip_hw_fu_76_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_OUTPUT_STREAM_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    INPUT_STREAM_TREADY <= regslice_both_INPUT_STREAM_V_data_V_U_ack_in;

    INPUT_STREAM_TREADY_int_regslice_assign_proc : process(grp_wrapper_zip_hw_fu_76_INPUT_STREAM_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            INPUT_STREAM_TREADY_int_regslice <= grp_wrapper_zip_hw_fu_76_INPUT_STREAM_TREADY;
        else 
            INPUT_STREAM_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_TVALID <= regslice_both_OUTPUT_STREAM_V_data_V_U_vld_out;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state4, regslice_both_OUTPUT_STREAM_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_OUTPUT_STREAM_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, regslice_both_OUTPUT_STREAM_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_OUTPUT_STREAM_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_fu_111_p1 <= size(31 - 1 downto 0);
    grp_wrapper_zip_hw_fu_76_OUTPUT_STREAM_TREADY <= (ap_CS_fsm_state3 and OUTPUT_STREAM_TREADY_int_regslice);
    grp_wrapper_zip_hw_fu_76_ap_start <= grp_wrapper_zip_hw_fu_76_ap_start_reg;
end behav;

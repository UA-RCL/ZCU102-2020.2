-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter2DKernel_Window2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_stream_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_stream_V_TVALID : IN STD_LOGIC;
    input_stream_V_TREADY : OUT STD_LOGIC;
    window_stream_din : OUT STD_LOGIC_VECTOR (3871 downto 0);
    window_stream_full_n : IN STD_LOGIC;
    window_stream_write : OUT STD_LOGIC;
    width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    width_empty_n : IN STD_LOGIC;
    width_read : OUT STD_LOGIC;
    height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    height_empty_n : IN STD_LOGIC;
    height_read : OUT STD_LOGIC );
end;


architecture behav of Filter2DKernel_Window2D is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv17_5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000101";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_stream_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln100_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_stream_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln131_reg_2720 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln131_reg_2720_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal width_blk_n : STD_LOGIC;
    signal height_blk_n : STD_LOGIC;
    signal n_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_ptr_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_pixel_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_read_reg_2591 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln93_1_fu_772_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln93_1_reg_2607 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ramp_up_fu_796_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ramp_up_reg_2612 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln93_4_fu_802_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln93_4_reg_2617 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_1913_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_pixels_reg_2622 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_iterations_fu_805_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of num_iterations_fu_805_p2 : signal is "no";
    signal num_iterations_reg_2627 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln100_fu_815_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln100_reg_2632 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_fu_819_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op164_read_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln100_reg_2642 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_2642_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal LineBuffer_0_addr_reg_2655 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_0_addr_reg_2655_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_1_addr_reg_2661 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_1_addr_reg_2661_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_2_addr_reg_2667 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_2_addr_reg_2667_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_3_addr_reg_2673 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_3_addr_reg_2673_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_4_addr_reg_2679 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_4_addr_reg_2679_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_5_addr_reg_2685 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_5_addr_reg_2685_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_6_addr_reg_2691 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_6_addr_reg_2691_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_7_addr_reg_2697 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_7_addr_reg_2697_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_8_addr_reg_2703 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_8_addr_reg_2703_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_9_addr_reg_2709 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_ptr_2_fu_860_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln131_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Window_pix_0_1_0275_i_load_reg_2724 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_1_load_reg_2729 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_2_load_reg_2734 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_3_load_reg_2739 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_4_load_reg_2744 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_5_load_reg_2749 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_6_load_reg_2754 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_7_load_reg_2759 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_8_load_reg_2764 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_1_0285_i_load_reg_2769 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_1_load_reg_2774 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_2_load_reg_2779 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_3_load_reg_2784 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_4_load_reg_2789 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_5_load_reg_2794 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_6_load_reg_2799 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_7_load_reg_2804 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_8_load_reg_2809 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_1_0295_i_load_reg_2814 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_1_load_reg_2819 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_2_load_reg_2824 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_3_load_reg_2829 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_4_load_reg_2834 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_5_load_reg_2839 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_6_load_reg_2844 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_7_load_reg_2849 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_8_load_reg_2854 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_1_0305_i_load_reg_2859 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_1_load_reg_2864 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_2_load_reg_2869 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_3_load_reg_2874 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_4_load_reg_2879 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_5_load_reg_2884 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_6_load_reg_2889 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_7_load_reg_2894 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_8_load_reg_2899 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_1_0315_i_load_reg_2904 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_1_load_reg_2909 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_2_load_reg_2914 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_3_load_reg_2919 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_4_load_reg_2924 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_5_load_reg_2929 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_6_load_reg_2934 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_7_load_reg_2939 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_8_load_reg_2944 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_1_0325_i_load_reg_2949 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_1_load_reg_2954 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_2_load_reg_2959 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_3_load_reg_2964 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_4_load_reg_2969 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_5_load_reg_2974 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_6_load_reg_2979 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_7_load_reg_2984 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_8_load_reg_2989 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_1_0335_i_load_reg_2994 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_1_load_reg_2999 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_2_load_reg_3004 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_3_load_reg_3009 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_4_load_reg_3014 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_5_load_reg_3019 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_6_load_reg_3024 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_7_load_reg_3029 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_8_load_reg_3034 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_1_0345_i_load_reg_3039 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_1_load_reg_3044 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_2_load_reg_3049 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_3_load_reg_3054 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_4_load_reg_3059 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_5_load_reg_3064 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_6_load_reg_3069 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_7_load_reg_3074 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_8_load_reg_3079 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_1_0355_i_load_reg_3084 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_1_load_reg_3089 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_2_load_reg_3094 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_3_load_reg_3099 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_4_load_reg_3104 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_5_load_reg_3109 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_6_load_reg_3114 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_7_load_reg_3119 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_8_load_reg_3124 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_1_0365_i_load_reg_3129 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_1_load_reg_3134 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_2_load_reg_3139 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_3_load_reg_3144 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_4_load_reg_3149 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_5_load_reg_3154 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_6_load_reg_3159 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_7_load_reg_3164 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_8_load_reg_3169 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_1_0375_i_load_reg_3174 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_1_load_reg_3179 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_2_load_reg_3184 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_3_load_reg_3189 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_4_load_reg_3194 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_5_load_reg_3199 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_6_load_reg_3204 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_7_load_reg_3209 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_8_load_reg_3214 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_9_load_reg_3219 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_9_load_reg_3224 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_9_load_reg_3229 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_9_load_reg_3234 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_9_load_reg_3239 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_9_load_reg_3244 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_9_load_reg_3249 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_9_load_reg_3254 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_9_load_reg_3259 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_9_load_reg_3264 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_9_load_reg_3269 : STD_LOGIC_VECTOR (31 downto 0);
    signal LineBuffer_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_10_reg_3274 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal LineBuffer_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_10_reg_3279 : STD_LOGIC_VECTOR (31 downto 0);
    signal LineBuffer_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_10_reg_3285 : STD_LOGIC_VECTOR (31 downto 0);
    signal LineBuffer_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_10_reg_3291 : STD_LOGIC_VECTOR (31 downto 0);
    signal LineBuffer_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_10_reg_3297 : STD_LOGIC_VECTOR (31 downto 0);
    signal LineBuffer_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_10_reg_3303 : STD_LOGIC_VECTOR (31 downto 0);
    signal LineBuffer_6_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_10_reg_3309 : STD_LOGIC_VECTOR (31 downto 0);
    signal LineBuffer_7_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_10_reg_3315 : STD_LOGIC_VECTOR (31 downto 0);
    signal LineBuffer_8_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_10_reg_3321 : STD_LOGIC_VECTOR (31 downto 0);
    signal LineBuffer_9_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_10_reg_3327 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_condition_pp0_exit_iter1_state6 : STD_LOGIC;
    signal LineBuffer_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_0_ce0 : STD_LOGIC;
    signal LineBuffer_0_we0 : STD_LOGIC;
    signal LineBuffer_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_0_ce1 : STD_LOGIC;
    signal LineBuffer_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_1_ce0 : STD_LOGIC;
    signal LineBuffer_1_we0 : STD_LOGIC;
    signal LineBuffer_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_1_ce1 : STD_LOGIC;
    signal LineBuffer_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_2_ce0 : STD_LOGIC;
    signal LineBuffer_2_we0 : STD_LOGIC;
    signal LineBuffer_2_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_2_ce1 : STD_LOGIC;
    signal LineBuffer_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_3_ce0 : STD_LOGIC;
    signal LineBuffer_3_we0 : STD_LOGIC;
    signal LineBuffer_3_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_3_ce1 : STD_LOGIC;
    signal LineBuffer_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_4_ce0 : STD_LOGIC;
    signal LineBuffer_4_we0 : STD_LOGIC;
    signal LineBuffer_4_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_4_ce1 : STD_LOGIC;
    signal LineBuffer_5_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_5_ce0 : STD_LOGIC;
    signal LineBuffer_5_we0 : STD_LOGIC;
    signal LineBuffer_5_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_5_ce1 : STD_LOGIC;
    signal LineBuffer_6_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_6_ce0 : STD_LOGIC;
    signal LineBuffer_6_we0 : STD_LOGIC;
    signal LineBuffer_6_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_6_ce1 : STD_LOGIC;
    signal LineBuffer_7_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_7_ce0 : STD_LOGIC;
    signal LineBuffer_7_we0 : STD_LOGIC;
    signal LineBuffer_7_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_7_ce1 : STD_LOGIC;
    signal LineBuffer_8_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_8_ce0 : STD_LOGIC;
    signal LineBuffer_8_we0 : STD_LOGIC;
    signal LineBuffer_8_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_8_ce1 : STD_LOGIC;
    signal LineBuffer_9_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_9_ce0 : STD_LOGIC;
    signal LineBuffer_9_we0 : STD_LOGIC;
    signal LineBuffer_9_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_9_ce1 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_new_pixel_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_new_pixel_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxprom19_i_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Window_pix_0_1_0275_i_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_1_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_2_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_3_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_4_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_5_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_6_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_7_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_8_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_0_9_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_1_0285_i_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_1_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_2_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_3_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_4_fu_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_5_fu_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_6_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_7_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_8_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_1_9_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_1_0295_i_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_1_fu_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_2_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_3_fu_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_4_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_5_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_6_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_7_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_8_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_2_9_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_1_0305_i_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_1_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_2_fu_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_3_fu_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_4_fu_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_5_fu_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_6_fu_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_7_fu_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_8_fu_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_3_9_fu_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_1_0315_i_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_1_fu_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_2_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_3_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_4_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_5_fu_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_6_fu_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_7_fu_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_8_fu_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_4_9_fu_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_1_0325_i_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_1_fu_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_2_fu_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_3_fu_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_4_fu_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_5_fu_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_6_fu_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_7_fu_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_8_fu_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_5_9_fu_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_1_0335_i_fu_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_1_fu_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_2_fu_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_3_fu_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_4_fu_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_5_fu_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_6_fu_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_7_fu_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_8_fu_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_6_9_fu_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_1_0345_i_fu_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_1_fu_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_2_fu_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_3_fu_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_4_fu_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_5_fu_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_6_fu_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_7_fu_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_8_fu_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_7_9_fu_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_1_0355_i_fu_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_1_fu_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_2_fu_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_3_fu_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_4_fu_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_5_fu_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_6_fu_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_7_fu_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_8_fu_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_8_9_fu_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_1_0365_i_fu_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_1_fu_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_2_fu_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_3_fu_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_4_fu_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_5_fu_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_6_fu_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_7_fu_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_8_fu_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_9_9_fu_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_1_0375_i_fu_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_1_fu_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_2_fu_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_3_fu_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_4_fu_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_5_fu_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_6_fu_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_7_fu_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_8_fu_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal Window_pix_10_9_fu_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_775_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln93_fu_786_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln93_3_fu_792_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln93_2_fu_782_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_i_fu_810_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln124_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_ptr_1_fu_854_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1913_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1913_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1913_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_168 : BOOLEAN;
    signal ap_enable_state5_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_414 : BOOLEAN;
    signal ap_enable_state6_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_436 : BOOLEAN;
    signal ap_enable_state7_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_170 : BOOLEAN;
    signal ap_enable_operation_415 : BOOLEAN;
    signal ap_enable_operation_437 : BOOLEAN;
    signal ap_enable_operation_172 : BOOLEAN;
    signal ap_enable_operation_416 : BOOLEAN;
    signal ap_enable_operation_438 : BOOLEAN;
    signal ap_enable_operation_174 : BOOLEAN;
    signal ap_enable_operation_417 : BOOLEAN;
    signal ap_enable_operation_439 : BOOLEAN;
    signal ap_enable_operation_176 : BOOLEAN;
    signal ap_enable_operation_418 : BOOLEAN;
    signal ap_enable_operation_440 : BOOLEAN;
    signal ap_enable_operation_178 : BOOLEAN;
    signal ap_enable_operation_419 : BOOLEAN;
    signal ap_enable_operation_441 : BOOLEAN;
    signal ap_enable_operation_180 : BOOLEAN;
    signal ap_enable_operation_420 : BOOLEAN;
    signal ap_enable_operation_442 : BOOLEAN;
    signal ap_enable_operation_182 : BOOLEAN;
    signal ap_enable_operation_421 : BOOLEAN;
    signal ap_enable_operation_443 : BOOLEAN;
    signal ap_enable_operation_184 : BOOLEAN;
    signal ap_enable_operation_422 : BOOLEAN;
    signal ap_enable_operation_444 : BOOLEAN;
    signal ap_enable_operation_186 : BOOLEAN;
    signal ap_enable_operation_423 : BOOLEAN;
    signal ap_enable_operation_424 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_input_stream_V_U_apdone_blk : STD_LOGIC;
    signal input_stream_V_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal input_stream_V_TVALID_int_regslice : STD_LOGIC;
    signal input_stream_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_stream_V_U_ack_in : STD_LOGIC;
    signal grp_fu_1913_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1913_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_130 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component Filter2DKernel_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Filter2DKernel_Window2D_LineBuffer_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Filter2DKernel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    LineBuffer_0_U : component Filter2DKernel_Window2D_LineBuffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LineBuffer_0_address0,
        ce0 => LineBuffer_0_ce0,
        we0 => LineBuffer_0_we0,
        d0 => Window_pix_1_10_reg_3279,
        address1 => LineBuffer_0_address1,
        ce1 => LineBuffer_0_ce1,
        q1 => LineBuffer_0_q1);

    LineBuffer_1_U : component Filter2DKernel_Window2D_LineBuffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LineBuffer_1_address0,
        ce0 => LineBuffer_1_ce0,
        we0 => LineBuffer_1_we0,
        d0 => Window_pix_2_10_reg_3285,
        address1 => LineBuffer_1_address1,
        ce1 => LineBuffer_1_ce1,
        q1 => LineBuffer_1_q1);

    LineBuffer_2_U : component Filter2DKernel_Window2D_LineBuffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LineBuffer_2_address0,
        ce0 => LineBuffer_2_ce0,
        we0 => LineBuffer_2_we0,
        d0 => Window_pix_3_10_reg_3291,
        address1 => LineBuffer_2_address1,
        ce1 => LineBuffer_2_ce1,
        q1 => LineBuffer_2_q1);

    LineBuffer_3_U : component Filter2DKernel_Window2D_LineBuffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LineBuffer_3_address0,
        ce0 => LineBuffer_3_ce0,
        we0 => LineBuffer_3_we0,
        d0 => Window_pix_4_10_reg_3297,
        address1 => LineBuffer_3_address1,
        ce1 => LineBuffer_3_ce1,
        q1 => LineBuffer_3_q1);

    LineBuffer_4_U : component Filter2DKernel_Window2D_LineBuffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LineBuffer_4_address0,
        ce0 => LineBuffer_4_ce0,
        we0 => LineBuffer_4_we0,
        d0 => Window_pix_5_10_reg_3303,
        address1 => LineBuffer_4_address1,
        ce1 => LineBuffer_4_ce1,
        q1 => LineBuffer_4_q1);

    LineBuffer_5_U : component Filter2DKernel_Window2D_LineBuffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LineBuffer_5_address0,
        ce0 => LineBuffer_5_ce0,
        we0 => LineBuffer_5_we0,
        d0 => Window_pix_6_10_reg_3309,
        address1 => LineBuffer_5_address1,
        ce1 => LineBuffer_5_ce1,
        q1 => LineBuffer_5_q1);

    LineBuffer_6_U : component Filter2DKernel_Window2D_LineBuffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LineBuffer_6_address0,
        ce0 => LineBuffer_6_ce0,
        we0 => LineBuffer_6_we0,
        d0 => Window_pix_7_10_reg_3315,
        address1 => LineBuffer_6_address1,
        ce1 => LineBuffer_6_ce1,
        q1 => LineBuffer_6_q1);

    LineBuffer_7_U : component Filter2DKernel_Window2D_LineBuffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LineBuffer_7_address0,
        ce0 => LineBuffer_7_ce0,
        we0 => LineBuffer_7_we0,
        d0 => Window_pix_8_10_reg_3321,
        address1 => LineBuffer_7_address1,
        ce1 => LineBuffer_7_ce1,
        q1 => LineBuffer_7_q1);

    LineBuffer_8_U : component Filter2DKernel_Window2D_LineBuffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LineBuffer_8_address0,
        ce0 => LineBuffer_8_ce0,
        we0 => LineBuffer_8_we0,
        d0 => Window_pix_9_10_reg_3327,
        address1 => LineBuffer_8_address1,
        ce1 => LineBuffer_8_ce1,
        q1 => LineBuffer_8_q1);

    LineBuffer_9_U : component Filter2DKernel_Window2D_LineBuffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => LineBuffer_9_address0,
        ce0 => LineBuffer_9_ce0,
        we0 => LineBuffer_9_we0,
        d0 => ap_phi_reg_pp0_iter1_new_pixel_reg_751,
        address1 => LineBuffer_9_address1,
        ce1 => LineBuffer_9_ce1,
        q1 => LineBuffer_9_q1);

    mul_mul_16ns_16ns_32_4_1_U17 : component Filter2DKernel_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1913_p0,
        din1 => grp_fu_1913_p1,
        ce => grp_fu_1913_ce,
        dout => grp_fu_1913_p2);

    regslice_both_input_stream_V_U : component Filter2DKernel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => input_stream_V_TDATA,
        vld_in => input_stream_V_TVALID,
        ack_in => regslice_both_input_stream_V_U_ack_in,
        data_out => input_stream_V_TDATA_int_regslice,
        vld_out => input_stream_V_TVALID_int_regslice,
        ack_out => input_stream_V_TREADY_int_regslice,
        apdone_blk => regslice_both_input_stream_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state6)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state6))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_new_pixel_reg_751_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_130)) then
                if (((icmp_ln107_fu_830_p2 = ap_const_lv1_0) and (icmp_ln100_fu_825_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_new_pixel_reg_751 <= ap_const_lv32_0;
                elsif (((icmp_ln107_fu_830_p2 = ap_const_lv1_1) and (icmp_ln100_fu_825_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_new_pixel_reg_751 <= input_stream_V_TDATA_int_regslice;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_new_pixel_reg_751 <= ap_phi_reg_pp0_iter0_new_pixel_reg_751;
                end if;
            end if; 
        end if;
    end process;

    col_ptr_reg_740_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_825_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                col_ptr_reg_740 <= col_ptr_2_fu_860_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                col_ptr_reg_740 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    n_reg_729_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_825_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                n_reg_729 <= n_1_fu_819_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                n_reg_729 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_825_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                LineBuffer_0_addr_reg_2655 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);
                LineBuffer_1_addr_reg_2661 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);
                LineBuffer_2_addr_reg_2667 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);
                LineBuffer_3_addr_reg_2673 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);
                LineBuffer_4_addr_reg_2679 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);
                LineBuffer_5_addr_reg_2685 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);
                LineBuffer_6_addr_reg_2691 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);
                LineBuffer_7_addr_reg_2697 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);
                LineBuffer_8_addr_reg_2703 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);
                LineBuffer_9_addr_reg_2709 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);
                icmp_ln131_reg_2720 <= icmp_ln131_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                LineBuffer_0_addr_reg_2655_pp0_iter1_reg <= LineBuffer_0_addr_reg_2655;
                LineBuffer_1_addr_reg_2661_pp0_iter1_reg <= LineBuffer_1_addr_reg_2661;
                LineBuffer_2_addr_reg_2667_pp0_iter1_reg <= LineBuffer_2_addr_reg_2667;
                LineBuffer_3_addr_reg_2673_pp0_iter1_reg <= LineBuffer_3_addr_reg_2673;
                LineBuffer_4_addr_reg_2679_pp0_iter1_reg <= LineBuffer_4_addr_reg_2679;
                LineBuffer_5_addr_reg_2685_pp0_iter1_reg <= LineBuffer_5_addr_reg_2685;
                LineBuffer_6_addr_reg_2691_pp0_iter1_reg <= LineBuffer_6_addr_reg_2691;
                LineBuffer_7_addr_reg_2697_pp0_iter1_reg <= LineBuffer_7_addr_reg_2697;
                LineBuffer_8_addr_reg_2703_pp0_iter1_reg <= LineBuffer_8_addr_reg_2703;
                Window_pix_0_1_0275_i_load_reg_2724 <= Window_pix_0_1_0275_i_fu_64;
                Window_pix_0_1_load_reg_2729 <= Window_pix_0_1_fu_68;
                Window_pix_0_2_load_reg_2734 <= Window_pix_0_2_fu_72;
                Window_pix_0_3_load_reg_2739 <= Window_pix_0_3_fu_76;
                Window_pix_0_4_load_reg_2744 <= Window_pix_0_4_fu_80;
                Window_pix_0_5_load_reg_2749 <= Window_pix_0_5_fu_84;
                Window_pix_0_6_load_reg_2754 <= Window_pix_0_6_fu_88;
                Window_pix_0_7_load_reg_2759 <= Window_pix_0_7_fu_92;
                Window_pix_0_8_load_reg_2764 <= Window_pix_0_8_fu_96;
                Window_pix_10_1_0375_i_load_reg_3174 <= Window_pix_10_1_0375_i_fu_464;
                Window_pix_10_1_load_reg_3179 <= Window_pix_10_1_fu_468;
                Window_pix_10_2_load_reg_3184 <= Window_pix_10_2_fu_472;
                Window_pix_10_3_load_reg_3189 <= Window_pix_10_3_fu_476;
                Window_pix_10_4_load_reg_3194 <= Window_pix_10_4_fu_480;
                Window_pix_10_5_load_reg_3199 <= Window_pix_10_5_fu_484;
                Window_pix_10_6_load_reg_3204 <= Window_pix_10_6_fu_488;
                Window_pix_10_7_load_reg_3209 <= Window_pix_10_7_fu_492;
                Window_pix_10_8_load_reg_3214 <= Window_pix_10_8_fu_496;
                Window_pix_1_1_0285_i_load_reg_2769 <= Window_pix_1_1_0285_i_fu_104;
                Window_pix_1_1_load_reg_2774 <= Window_pix_1_1_fu_108;
                Window_pix_1_2_load_reg_2779 <= Window_pix_1_2_fu_112;
                Window_pix_1_3_load_reg_2784 <= Window_pix_1_3_fu_116;
                Window_pix_1_4_load_reg_2789 <= Window_pix_1_4_fu_120;
                Window_pix_1_5_load_reg_2794 <= Window_pix_1_5_fu_124;
                Window_pix_1_6_load_reg_2799 <= Window_pix_1_6_fu_128;
                Window_pix_1_7_load_reg_2804 <= Window_pix_1_7_fu_132;
                Window_pix_1_8_load_reg_2809 <= Window_pix_1_8_fu_136;
                Window_pix_2_1_0295_i_load_reg_2814 <= Window_pix_2_1_0295_i_fu_144;
                Window_pix_2_1_load_reg_2819 <= Window_pix_2_1_fu_148;
                Window_pix_2_2_load_reg_2824 <= Window_pix_2_2_fu_152;
                Window_pix_2_3_load_reg_2829 <= Window_pix_2_3_fu_156;
                Window_pix_2_4_load_reg_2834 <= Window_pix_2_4_fu_160;
                Window_pix_2_5_load_reg_2839 <= Window_pix_2_5_fu_164;
                Window_pix_2_6_load_reg_2844 <= Window_pix_2_6_fu_168;
                Window_pix_2_7_load_reg_2849 <= Window_pix_2_7_fu_172;
                Window_pix_2_8_load_reg_2854 <= Window_pix_2_8_fu_176;
                Window_pix_3_1_0305_i_load_reg_2859 <= Window_pix_3_1_0305_i_fu_184;
                Window_pix_3_1_load_reg_2864 <= Window_pix_3_1_fu_188;
                Window_pix_3_2_load_reg_2869 <= Window_pix_3_2_fu_192;
                Window_pix_3_3_load_reg_2874 <= Window_pix_3_3_fu_196;
                Window_pix_3_4_load_reg_2879 <= Window_pix_3_4_fu_200;
                Window_pix_3_5_load_reg_2884 <= Window_pix_3_5_fu_204;
                Window_pix_3_6_load_reg_2889 <= Window_pix_3_6_fu_208;
                Window_pix_3_7_load_reg_2894 <= Window_pix_3_7_fu_212;
                Window_pix_3_8_load_reg_2899 <= Window_pix_3_8_fu_216;
                Window_pix_4_1_0315_i_load_reg_2904 <= Window_pix_4_1_0315_i_fu_224;
                Window_pix_4_1_load_reg_2909 <= Window_pix_4_1_fu_228;
                Window_pix_4_2_load_reg_2914 <= Window_pix_4_2_fu_232;
                Window_pix_4_3_load_reg_2919 <= Window_pix_4_3_fu_236;
                Window_pix_4_4_load_reg_2924 <= Window_pix_4_4_fu_240;
                Window_pix_4_5_load_reg_2929 <= Window_pix_4_5_fu_244;
                Window_pix_4_6_load_reg_2934 <= Window_pix_4_6_fu_248;
                Window_pix_4_7_load_reg_2939 <= Window_pix_4_7_fu_252;
                Window_pix_4_8_load_reg_2944 <= Window_pix_4_8_fu_256;
                Window_pix_5_1_0325_i_load_reg_2949 <= Window_pix_5_1_0325_i_fu_264;
                Window_pix_5_1_load_reg_2954 <= Window_pix_5_1_fu_268;
                Window_pix_5_2_load_reg_2959 <= Window_pix_5_2_fu_272;
                Window_pix_5_3_load_reg_2964 <= Window_pix_5_3_fu_276;
                Window_pix_5_4_load_reg_2969 <= Window_pix_5_4_fu_280;
                Window_pix_5_5_load_reg_2974 <= Window_pix_5_5_fu_284;
                Window_pix_5_6_load_reg_2979 <= Window_pix_5_6_fu_288;
                Window_pix_5_7_load_reg_2984 <= Window_pix_5_7_fu_292;
                Window_pix_5_8_load_reg_2989 <= Window_pix_5_8_fu_296;
                Window_pix_6_1_0335_i_load_reg_2994 <= Window_pix_6_1_0335_i_fu_304;
                Window_pix_6_1_load_reg_2999 <= Window_pix_6_1_fu_308;
                Window_pix_6_2_load_reg_3004 <= Window_pix_6_2_fu_312;
                Window_pix_6_3_load_reg_3009 <= Window_pix_6_3_fu_316;
                Window_pix_6_4_load_reg_3014 <= Window_pix_6_4_fu_320;
                Window_pix_6_5_load_reg_3019 <= Window_pix_6_5_fu_324;
                Window_pix_6_6_load_reg_3024 <= Window_pix_6_6_fu_328;
                Window_pix_6_7_load_reg_3029 <= Window_pix_6_7_fu_332;
                Window_pix_6_8_load_reg_3034 <= Window_pix_6_8_fu_336;
                Window_pix_7_1_0345_i_load_reg_3039 <= Window_pix_7_1_0345_i_fu_344;
                Window_pix_7_1_load_reg_3044 <= Window_pix_7_1_fu_348;
                Window_pix_7_2_load_reg_3049 <= Window_pix_7_2_fu_352;
                Window_pix_7_3_load_reg_3054 <= Window_pix_7_3_fu_356;
                Window_pix_7_4_load_reg_3059 <= Window_pix_7_4_fu_360;
                Window_pix_7_5_load_reg_3064 <= Window_pix_7_5_fu_364;
                Window_pix_7_6_load_reg_3069 <= Window_pix_7_6_fu_368;
                Window_pix_7_7_load_reg_3074 <= Window_pix_7_7_fu_372;
                Window_pix_7_8_load_reg_3079 <= Window_pix_7_8_fu_376;
                Window_pix_8_1_0355_i_load_reg_3084 <= Window_pix_8_1_0355_i_fu_384;
                Window_pix_8_1_load_reg_3089 <= Window_pix_8_1_fu_388;
                Window_pix_8_2_load_reg_3094 <= Window_pix_8_2_fu_392;
                Window_pix_8_3_load_reg_3099 <= Window_pix_8_3_fu_396;
                Window_pix_8_4_load_reg_3104 <= Window_pix_8_4_fu_400;
                Window_pix_8_5_load_reg_3109 <= Window_pix_8_5_fu_404;
                Window_pix_8_6_load_reg_3114 <= Window_pix_8_6_fu_408;
                Window_pix_8_7_load_reg_3119 <= Window_pix_8_7_fu_412;
                Window_pix_8_8_load_reg_3124 <= Window_pix_8_8_fu_416;
                Window_pix_9_1_0365_i_load_reg_3129 <= Window_pix_9_1_0365_i_fu_424;
                Window_pix_9_1_load_reg_3134 <= Window_pix_9_1_fu_428;
                Window_pix_9_2_load_reg_3139 <= Window_pix_9_2_fu_432;
                Window_pix_9_3_load_reg_3144 <= Window_pix_9_3_fu_436;
                Window_pix_9_4_load_reg_3149 <= Window_pix_9_4_fu_440;
                Window_pix_9_5_load_reg_3154 <= Window_pix_9_5_fu_444;
                Window_pix_9_6_load_reg_3159 <= Window_pix_9_6_fu_448;
                Window_pix_9_7_load_reg_3164 <= Window_pix_9_7_fu_452;
                Window_pix_9_8_load_reg_3169 <= Window_pix_9_8_fu_456;
                icmp_ln100_reg_2642 <= icmp_ln100_fu_825_p2;
                icmp_ln100_reg_2642_pp0_iter1_reg <= icmp_ln100_reg_2642;
                icmp_ln131_reg_2720_pp0_iter1_reg <= icmp_ln131_reg_2720;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln100_reg_2642 = ap_const_lv1_0))) then
                Window_pix_0_10_reg_3274 <= LineBuffer_0_q1;
                Window_pix_0_9_fu_100 <= LineBuffer_0_q1;
                Window_pix_10_9_fu_500 <= ap_phi_reg_pp0_iter1_new_pixel_reg_751;
                Window_pix_1_10_reg_3279 <= LineBuffer_1_q1;
                Window_pix_1_9_fu_140 <= LineBuffer_1_q1;
                Window_pix_2_10_reg_3285 <= LineBuffer_2_q1;
                Window_pix_2_9_fu_180 <= LineBuffer_2_q1;
                Window_pix_3_10_reg_3291 <= LineBuffer_3_q1;
                Window_pix_3_9_fu_220 <= LineBuffer_3_q1;
                Window_pix_4_10_reg_3297 <= LineBuffer_4_q1;
                Window_pix_4_9_fu_260 <= LineBuffer_4_q1;
                Window_pix_5_10_reg_3303 <= LineBuffer_5_q1;
                Window_pix_5_9_fu_300 <= LineBuffer_5_q1;
                Window_pix_6_10_reg_3309 <= LineBuffer_6_q1;
                Window_pix_6_9_fu_340 <= LineBuffer_6_q1;
                Window_pix_7_10_reg_3315 <= LineBuffer_7_q1;
                Window_pix_7_9_fu_380 <= LineBuffer_7_q1;
                Window_pix_8_10_reg_3321 <= LineBuffer_8_q1;
                Window_pix_8_9_fu_420 <= LineBuffer_8_q1;
                Window_pix_9_10_reg_3327 <= LineBuffer_9_q1;
                Window_pix_9_9_fu_460 <= LineBuffer_9_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Window_pix_0_1_0275_i_fu_64 <= Window_pix_0_1_fu_68;
                Window_pix_0_1_fu_68 <= Window_pix_0_2_fu_72;
                Window_pix_0_2_fu_72 <= Window_pix_0_3_fu_76;
                Window_pix_0_3_fu_76 <= Window_pix_0_4_fu_80;
                Window_pix_0_4_fu_80 <= Window_pix_0_5_fu_84;
                Window_pix_0_5_fu_84 <= Window_pix_0_6_fu_88;
                Window_pix_0_6_fu_88 <= Window_pix_0_7_fu_92;
                Window_pix_0_7_fu_92 <= Window_pix_0_8_fu_96;
                Window_pix_0_8_fu_96 <= Window_pix_0_9_fu_100;
                Window_pix_10_1_0375_i_fu_464 <= Window_pix_10_1_fu_468;
                Window_pix_10_1_fu_468 <= Window_pix_10_2_fu_472;
                Window_pix_10_2_fu_472 <= Window_pix_10_3_fu_476;
                Window_pix_10_3_fu_476 <= Window_pix_10_4_fu_480;
                Window_pix_10_4_fu_480 <= Window_pix_10_5_fu_484;
                Window_pix_10_5_fu_484 <= Window_pix_10_6_fu_488;
                Window_pix_10_6_fu_488 <= Window_pix_10_7_fu_492;
                Window_pix_10_7_fu_492 <= Window_pix_10_8_fu_496;
                Window_pix_10_8_fu_496 <= Window_pix_10_9_fu_500;
                Window_pix_1_1_0285_i_fu_104 <= Window_pix_1_1_fu_108;
                Window_pix_1_1_fu_108 <= Window_pix_1_2_fu_112;
                Window_pix_1_2_fu_112 <= Window_pix_1_3_fu_116;
                Window_pix_1_3_fu_116 <= Window_pix_1_4_fu_120;
                Window_pix_1_4_fu_120 <= Window_pix_1_5_fu_124;
                Window_pix_1_5_fu_124 <= Window_pix_1_6_fu_128;
                Window_pix_1_6_fu_128 <= Window_pix_1_7_fu_132;
                Window_pix_1_7_fu_132 <= Window_pix_1_8_fu_136;
                Window_pix_1_8_fu_136 <= Window_pix_1_9_fu_140;
                Window_pix_2_1_0295_i_fu_144 <= Window_pix_2_1_fu_148;
                Window_pix_2_1_fu_148 <= Window_pix_2_2_fu_152;
                Window_pix_2_2_fu_152 <= Window_pix_2_3_fu_156;
                Window_pix_2_3_fu_156 <= Window_pix_2_4_fu_160;
                Window_pix_2_4_fu_160 <= Window_pix_2_5_fu_164;
                Window_pix_2_5_fu_164 <= Window_pix_2_6_fu_168;
                Window_pix_2_6_fu_168 <= Window_pix_2_7_fu_172;
                Window_pix_2_7_fu_172 <= Window_pix_2_8_fu_176;
                Window_pix_2_8_fu_176 <= Window_pix_2_9_fu_180;
                Window_pix_3_1_0305_i_fu_184 <= Window_pix_3_1_fu_188;
                Window_pix_3_1_fu_188 <= Window_pix_3_2_fu_192;
                Window_pix_3_2_fu_192 <= Window_pix_3_3_fu_196;
                Window_pix_3_3_fu_196 <= Window_pix_3_4_fu_200;
                Window_pix_3_4_fu_200 <= Window_pix_3_5_fu_204;
                Window_pix_3_5_fu_204 <= Window_pix_3_6_fu_208;
                Window_pix_3_6_fu_208 <= Window_pix_3_7_fu_212;
                Window_pix_3_7_fu_212 <= Window_pix_3_8_fu_216;
                Window_pix_3_8_fu_216 <= Window_pix_3_9_fu_220;
                Window_pix_4_1_0315_i_fu_224 <= Window_pix_4_1_fu_228;
                Window_pix_4_1_fu_228 <= Window_pix_4_2_fu_232;
                Window_pix_4_2_fu_232 <= Window_pix_4_3_fu_236;
                Window_pix_4_3_fu_236 <= Window_pix_4_4_fu_240;
                Window_pix_4_4_fu_240 <= Window_pix_4_5_fu_244;
                Window_pix_4_5_fu_244 <= Window_pix_4_6_fu_248;
                Window_pix_4_6_fu_248 <= Window_pix_4_7_fu_252;
                Window_pix_4_7_fu_252 <= Window_pix_4_8_fu_256;
                Window_pix_4_8_fu_256 <= Window_pix_4_9_fu_260;
                Window_pix_5_1_0325_i_fu_264 <= Window_pix_5_1_fu_268;
                Window_pix_5_1_fu_268 <= Window_pix_5_2_fu_272;
                Window_pix_5_2_fu_272 <= Window_pix_5_3_fu_276;
                Window_pix_5_3_fu_276 <= Window_pix_5_4_fu_280;
                Window_pix_5_4_fu_280 <= Window_pix_5_5_fu_284;
                Window_pix_5_5_fu_284 <= Window_pix_5_6_fu_288;
                Window_pix_5_6_fu_288 <= Window_pix_5_7_fu_292;
                Window_pix_5_7_fu_292 <= Window_pix_5_8_fu_296;
                Window_pix_5_8_fu_296 <= Window_pix_5_9_fu_300;
                Window_pix_6_1_0335_i_fu_304 <= Window_pix_6_1_fu_308;
                Window_pix_6_1_fu_308 <= Window_pix_6_2_fu_312;
                Window_pix_6_2_fu_312 <= Window_pix_6_3_fu_316;
                Window_pix_6_3_fu_316 <= Window_pix_6_4_fu_320;
                Window_pix_6_4_fu_320 <= Window_pix_6_5_fu_324;
                Window_pix_6_5_fu_324 <= Window_pix_6_6_fu_328;
                Window_pix_6_6_fu_328 <= Window_pix_6_7_fu_332;
                Window_pix_6_7_fu_332 <= Window_pix_6_8_fu_336;
                Window_pix_6_8_fu_336 <= Window_pix_6_9_fu_340;
                Window_pix_7_1_0345_i_fu_344 <= Window_pix_7_1_fu_348;
                Window_pix_7_1_fu_348 <= Window_pix_7_2_fu_352;
                Window_pix_7_2_fu_352 <= Window_pix_7_3_fu_356;
                Window_pix_7_3_fu_356 <= Window_pix_7_4_fu_360;
                Window_pix_7_4_fu_360 <= Window_pix_7_5_fu_364;
                Window_pix_7_5_fu_364 <= Window_pix_7_6_fu_368;
                Window_pix_7_6_fu_368 <= Window_pix_7_7_fu_372;
                Window_pix_7_7_fu_372 <= Window_pix_7_8_fu_376;
                Window_pix_7_8_fu_376 <= Window_pix_7_9_fu_380;
                Window_pix_8_1_0355_i_fu_384 <= Window_pix_8_1_fu_388;
                Window_pix_8_1_fu_388 <= Window_pix_8_2_fu_392;
                Window_pix_8_2_fu_392 <= Window_pix_8_3_fu_396;
                Window_pix_8_3_fu_396 <= Window_pix_8_4_fu_400;
                Window_pix_8_4_fu_400 <= Window_pix_8_5_fu_404;
                Window_pix_8_5_fu_404 <= Window_pix_8_6_fu_408;
                Window_pix_8_6_fu_408 <= Window_pix_8_7_fu_412;
                Window_pix_8_7_fu_412 <= Window_pix_8_8_fu_416;
                Window_pix_8_8_fu_416 <= Window_pix_8_9_fu_420;
                Window_pix_9_1_0365_i_fu_424 <= Window_pix_9_1_fu_428;
                Window_pix_9_1_fu_428 <= Window_pix_9_2_fu_432;
                Window_pix_9_2_fu_432 <= Window_pix_9_3_fu_436;
                Window_pix_9_3_fu_436 <= Window_pix_9_4_fu_440;
                Window_pix_9_4_fu_440 <= Window_pix_9_5_fu_444;
                Window_pix_9_5_fu_444 <= Window_pix_9_6_fu_448;
                Window_pix_9_6_fu_448 <= Window_pix_9_7_fu_452;
                Window_pix_9_7_fu_452 <= Window_pix_9_8_fu_456;
                Window_pix_9_8_fu_456 <= Window_pix_9_9_fu_460;
                new_pixel_reg_751 <= ap_phi_reg_pp0_iter1_new_pixel_reg_751;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln100_reg_2642 = ap_const_lv1_0))) then
                Window_pix_0_9_load_reg_3219 <= Window_pix_0_9_fu_100;
                Window_pix_10_9_load_reg_3269 <= Window_pix_10_9_fu_500;
                Window_pix_1_9_load_reg_3224 <= Window_pix_1_9_fu_140;
                Window_pix_2_9_load_reg_3229 <= Window_pix_2_9_fu_180;
                Window_pix_3_9_load_reg_3234 <= Window_pix_3_9_fu_220;
                Window_pix_4_9_load_reg_3239 <= Window_pix_4_9_fu_260;
                Window_pix_5_9_load_reg_3244 <= Window_pix_5_9_fu_300;
                Window_pix_6_9_load_reg_3249 <= Window_pix_6_9_fu_340;
                Window_pix_7_9_load_reg_3254 <= Window_pix_7_9_fu_380;
                Window_pix_8_9_load_reg_3259 <= Window_pix_8_9_fu_420;
                Window_pix_9_9_load_reg_3264 <= Window_pix_9_9_fu_460;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                num_iterations_reg_2627 <= num_iterations_fu_805_p2;
                num_pixels_reg_2622 <= grp_fu_1913_p2;
                sext_ln100_reg_2632 <= sext_ln100_fu_815_p1;
                    zext_ln93_4_reg_2617(18 downto 0) <= zext_ln93_4_fu_802_p1(18 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ramp_up_reg_2612 <= ramp_up_fu_796_p2;
                    zext_ln93_1_reg_2607(15 downto 0) <= zext_ln93_1_fu_772_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                width_read_reg_2591 <= width_dout;
            end if;
        end if;
    end process;
    zext_ln93_1_reg_2607(16) <= '0';
    zext_ln93_4_reg_2617(31 downto 19) <= "0000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, width_empty_n, height_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    LineBuffer_0_address0 <= LineBuffer_0_addr_reg_2655_pp0_iter1_reg;
    LineBuffer_0_address1 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);

    LineBuffer_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuffer_0_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuffer_0_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0))) then 
            LineBuffer_0_we0 <= ap_const_logic_1;
        else 
            LineBuffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_1_address0 <= LineBuffer_1_addr_reg_2661_pp0_iter1_reg;
    LineBuffer_1_address1 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);

    LineBuffer_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuffer_1_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuffer_1_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0))) then 
            LineBuffer_1_we0 <= ap_const_logic_1;
        else 
            LineBuffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_2_address0 <= LineBuffer_2_addr_reg_2667_pp0_iter1_reg;
    LineBuffer_2_address1 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);

    LineBuffer_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuffer_2_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuffer_2_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0))) then 
            LineBuffer_2_we0 <= ap_const_logic_1;
        else 
            LineBuffer_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_3_address0 <= LineBuffer_3_addr_reg_2673_pp0_iter1_reg;
    LineBuffer_3_address1 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);

    LineBuffer_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuffer_3_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuffer_3_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0))) then 
            LineBuffer_3_we0 <= ap_const_logic_1;
        else 
            LineBuffer_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_4_address0 <= LineBuffer_4_addr_reg_2679_pp0_iter1_reg;
    LineBuffer_4_address1 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);

    LineBuffer_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuffer_4_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuffer_4_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0))) then 
            LineBuffer_4_we0 <= ap_const_logic_1;
        else 
            LineBuffer_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_5_address0 <= LineBuffer_5_addr_reg_2685_pp0_iter1_reg;
    LineBuffer_5_address1 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);

    LineBuffer_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuffer_5_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuffer_5_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0))) then 
            LineBuffer_5_we0 <= ap_const_logic_1;
        else 
            LineBuffer_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_6_address0 <= LineBuffer_6_addr_reg_2691_pp0_iter1_reg;
    LineBuffer_6_address1 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);

    LineBuffer_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuffer_6_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuffer_6_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0))) then 
            LineBuffer_6_we0 <= ap_const_logic_1;
        else 
            LineBuffer_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_7_address0 <= LineBuffer_7_addr_reg_2697_pp0_iter1_reg;
    LineBuffer_7_address1 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);

    LineBuffer_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuffer_7_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_7_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuffer_7_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0))) then 
            LineBuffer_7_we0 <= ap_const_logic_1;
        else 
            LineBuffer_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_8_address0 <= LineBuffer_8_addr_reg_2703_pp0_iter1_reg;
    LineBuffer_8_address1 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);

    LineBuffer_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuffer_8_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_8_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuffer_8_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_8_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0))) then 
            LineBuffer_8_we0 <= ap_const_logic_1;
        else 
            LineBuffer_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_9_address0 <= LineBuffer_9_addr_reg_2709;
    LineBuffer_9_address1 <= idxprom19_i_fu_835_p1(11 - 1 downto 0);

    LineBuffer_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuffer_9_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_9_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LineBuffer_9_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_9_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln100_reg_2642, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln100_reg_2642 = ap_const_lv1_0))) then 
            LineBuffer_9_we0 <= ap_const_logic_1;
        else 
            LineBuffer_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln93_fu_786_p2 <= std_logic_vector(unsigned(zext_ln93_1_fu_772_p1) + unsigned(ap_const_lv17_5));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(window_stream_full_n, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, icmp_ln131_reg_2720_pp0_iter1_reg, ap_predicate_op164_read_state5, input_stream_V_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln131_reg_2720_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (window_stream_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (input_stream_V_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op164_read_state5 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(window_stream_full_n, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, icmp_ln131_reg_2720_pp0_iter1_reg, ap_predicate_op164_read_state5, input_stream_V_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln131_reg_2720_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (window_stream_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (input_stream_V_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op164_read_state5 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(window_stream_full_n, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, icmp_ln131_reg_2720_pp0_iter1_reg, ap_predicate_op164_read_state5, input_stream_V_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln131_reg_2720_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (window_stream_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (input_stream_V_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op164_read_state5 = ap_const_boolean_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, width_empty_n, height_empty_n)
    begin
                ap_block_state1 <= ((height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter0_assign_proc : process(ap_predicate_op164_read_state5, input_stream_V_TVALID_int_regslice)
    begin
                ap_block_state5_pp0_stage0_iter0 <= ((input_stream_V_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op164_read_state5 = ap_const_boolean_1));
    end process;

        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter2_assign_proc : process(window_stream_full_n, icmp_ln131_reg_2720_pp0_iter1_reg)
    begin
                ap_block_state7_pp0_stage0_iter2 <= ((icmp_ln131_reg_2720_pp0_iter1_reg = ap_const_lv1_0) and (window_stream_full_n = ap_const_logic_0));
    end process;


    ap_condition_130_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_130 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter1_state6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln100_fu_825_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln100_fu_825_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_168_assign_proc : process(icmp_ln100_fu_825_p2)
    begin
                ap_enable_operation_168 <= (icmp_ln100_fu_825_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_170_assign_proc : process(icmp_ln100_fu_825_p2)
    begin
                ap_enable_operation_170 <= (icmp_ln100_fu_825_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_172_assign_proc : process(icmp_ln100_fu_825_p2)
    begin
                ap_enable_operation_172 <= (icmp_ln100_fu_825_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_174_assign_proc : process(icmp_ln100_fu_825_p2)
    begin
                ap_enable_operation_174 <= (icmp_ln100_fu_825_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_176_assign_proc : process(icmp_ln100_fu_825_p2)
    begin
                ap_enable_operation_176 <= (icmp_ln100_fu_825_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_178_assign_proc : process(icmp_ln100_fu_825_p2)
    begin
                ap_enable_operation_178 <= (icmp_ln100_fu_825_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_180_assign_proc : process(icmp_ln100_fu_825_p2)
    begin
                ap_enable_operation_180 <= (icmp_ln100_fu_825_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_182_assign_proc : process(icmp_ln100_fu_825_p2)
    begin
                ap_enable_operation_182 <= (icmp_ln100_fu_825_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_184_assign_proc : process(icmp_ln100_fu_825_p2)
    begin
                ap_enable_operation_184 <= (icmp_ln100_fu_825_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_186_assign_proc : process(icmp_ln100_fu_825_p2)
    begin
                ap_enable_operation_186 <= (icmp_ln100_fu_825_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_414_assign_proc : process(icmp_ln100_reg_2642)
    begin
                ap_enable_operation_414 <= (icmp_ln100_reg_2642 = ap_const_lv1_0);
    end process;


    ap_enable_operation_415_assign_proc : process(icmp_ln100_reg_2642)
    begin
                ap_enable_operation_415 <= (icmp_ln100_reg_2642 = ap_const_lv1_0);
    end process;


    ap_enable_operation_416_assign_proc : process(icmp_ln100_reg_2642)
    begin
                ap_enable_operation_416 <= (icmp_ln100_reg_2642 = ap_const_lv1_0);
    end process;


    ap_enable_operation_417_assign_proc : process(icmp_ln100_reg_2642)
    begin
                ap_enable_operation_417 <= (icmp_ln100_reg_2642 = ap_const_lv1_0);
    end process;


    ap_enable_operation_418_assign_proc : process(icmp_ln100_reg_2642)
    begin
                ap_enable_operation_418 <= (icmp_ln100_reg_2642 = ap_const_lv1_0);
    end process;


    ap_enable_operation_419_assign_proc : process(icmp_ln100_reg_2642)
    begin
                ap_enable_operation_419 <= (icmp_ln100_reg_2642 = ap_const_lv1_0);
    end process;


    ap_enable_operation_420_assign_proc : process(icmp_ln100_reg_2642)
    begin
                ap_enable_operation_420 <= (icmp_ln100_reg_2642 = ap_const_lv1_0);
    end process;


    ap_enable_operation_421_assign_proc : process(icmp_ln100_reg_2642)
    begin
                ap_enable_operation_421 <= (icmp_ln100_reg_2642 = ap_const_lv1_0);
    end process;


    ap_enable_operation_422_assign_proc : process(icmp_ln100_reg_2642)
    begin
                ap_enable_operation_422 <= (icmp_ln100_reg_2642 = ap_const_lv1_0);
    end process;


    ap_enable_operation_423_assign_proc : process(icmp_ln100_reg_2642)
    begin
                ap_enable_operation_423 <= (icmp_ln100_reg_2642 = ap_const_lv1_0);
    end process;


    ap_enable_operation_424_assign_proc : process(icmp_ln100_reg_2642)
    begin
                ap_enable_operation_424 <= (icmp_ln100_reg_2642 = ap_const_lv1_0);
    end process;


    ap_enable_operation_436_assign_proc : process(icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
                ap_enable_operation_436 <= (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_437_assign_proc : process(icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
                ap_enable_operation_437 <= (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_438_assign_proc : process(icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
                ap_enable_operation_438 <= (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_439_assign_proc : process(icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
                ap_enable_operation_439 <= (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_440_assign_proc : process(icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
                ap_enable_operation_440 <= (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_441_assign_proc : process(icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
                ap_enable_operation_441 <= (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_442_assign_proc : process(icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
                ap_enable_operation_442 <= (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_443_assign_proc : process(icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
                ap_enable_operation_443 <= (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_444_assign_proc : process(icmp_ln100_reg_2642_pp0_iter1_reg)
    begin
                ap_enable_operation_444 <= (icmp_ln100_reg_2642_pp0_iter1_reg = ap_const_lv1_0);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state5_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state5_pp0_iter0_stage0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state6_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state6_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state7_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state7_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_new_pixel_reg_751 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op164_read_state5_assign_proc : process(icmp_ln100_fu_825_p2, icmp_ln107_fu_830_p2)
    begin
                ap_predicate_op164_read_state5 <= ((icmp_ln107_fu_830_p2 = ap_const_lv1_1) and (icmp_ln100_fu_825_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_ptr_1_fu_854_p2 <= std_logic_vector(unsigned(col_ptr_reg_740) + unsigned(ap_const_lv32_1));
    col_ptr_2_fu_860_p3 <= 
        ap_const_lv32_0 when (icmp_ln124_fu_849_p2(0) = '1') else 
        col_ptr_1_fu_854_p2;

    grp_fu_1913_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, height_empty_n, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))))) then 
            grp_fu_1913_ce <= ap_const_logic_0;
        else 
            grp_fu_1913_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1913_p0 <= grp_fu_1913_p00(16 - 1 downto 0);
    grp_fu_1913_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_dout),32));
    grp_fu_1913_p1 <= grp_fu_1913_p10(16 - 1 downto 0);
    grp_fu_1913_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_dout),32));

    height_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_blk_n <= height_empty_n;
        else 
            height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    height_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, height_empty_n)
    begin
        if ((not(((height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_read <= ap_const_logic_1;
        else 
            height_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln100_fu_825_p2 <= "1" when (n_reg_729 = num_iterations_reg_2627) else "0";
    icmp_ln107_fu_830_p2 <= "1" when (unsigned(n_reg_729) < unsigned(num_pixels_reg_2622)) else "0";
    icmp_ln124_fu_849_p2 <= "1" when (col_ptr_reg_740 = sext_ln100_reg_2632) else "0";
    icmp_ln131_fu_868_p2 <= "1" when (unsigned(n_reg_729) < unsigned(zext_ln93_4_reg_2617)) else "0";
    idxprom19_i_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_ptr_reg_740),64));

    input_stream_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln100_fu_825_p2, icmp_ln107_fu_830_p2, input_stream_V_TVALID_int_regslice)
    begin
        if (((icmp_ln107_fu_830_p2 = ap_const_lv1_1) and (icmp_ln100_fu_825_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_stream_V_TDATA_blk_n <= input_stream_V_TVALID_int_regslice;
        else 
            input_stream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_stream_V_TREADY <= regslice_both_input_stream_V_U_ack_in;

    input_stream_V_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op164_read_state5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op164_read_state5 = ap_const_boolean_1))) then 
            input_stream_V_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input_stream_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    n_1_fu_819_p2 <= std_logic_vector(unsigned(n_reg_729) + unsigned(ap_const_lv32_1));
    num_iterations_fu_805_p2 <= std_logic_vector(unsigned(grp_fu_1913_p2) + unsigned(zext_ln93_4_fu_802_p1));
    ramp_up_fu_796_p2 <= std_logic_vector(unsigned(zext_ln93_3_fu_792_p1) + unsigned(zext_ln93_2_fu_782_p1));
        sext_ln100_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_i_fu_810_p2),32));

    shl_ln_fu_775_p3 <= (width_read_reg_2591 & ap_const_lv2_0);
    sub_i_fu_810_p2 <= std_logic_vector(unsigned(zext_ln93_1_reg_2607) + unsigned(ap_const_lv17_1FFFF));

    width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_blk_n <= width_empty_n;
        else 
            width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, height_empty_n)
    begin
        if ((not(((height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_read <= ap_const_logic_1;
        else 
            width_read <= ap_const_logic_0;
        end if; 
    end process;


    window_stream_blk_n_assign_proc : process(window_stream_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln131_reg_2720_pp0_iter1_reg)
    begin
        if (((icmp_ln131_reg_2720_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            window_stream_blk_n <= window_stream_full_n;
        else 
            window_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    window_stream_din <= ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((new_pixel_reg_751 & Window_pix_10_9_load_reg_3269) & Window_pix_10_8_load_reg_3214) & Window_pix_10_7_load_reg_3209) & Window_pix_10_6_load_reg_3204) & Window_pix_10_5_load_reg_3199) & Window_pix_10_4_load_reg_3194) & Window_pix_10_3_load_reg_3189) & Window_pix_10_2_load_reg_3184) & Window_pix_10_1_load_reg_3179) & Window_pix_10_1_0375_i_load_reg_3174) & Window_pix_9_10_reg_3327) & Window_pix_9_9_load_reg_3264) & Window_pix_9_8_load_reg_3169) & Window_pix_9_7_load_reg_3164) & Window_pix_9_6_load_reg_3159) & Window_pix_9_5_load_reg_3154) & Window_pix_9_4_load_reg_3149) & Window_pix_9_3_load_reg_3144) & Window_pix_9_2_load_reg_3139) & Window_pix_9_1_load_reg_3134) & Window_pix_9_1_0365_i_load_reg_3129) & Window_pix_8_10_reg_3321) & Window_pix_8_9_load_reg_3259) & Window_pix_8_8_load_reg_3124) & Window_pix_8_7_load_reg_3119) & Window_pix_8_6_load_reg_3114) & Window_pix_8_5_load_reg_3109) & Window_pix_8_4_load_reg_3104) & Window_pix_8_3_load_reg_3099) & Window_pix_8_2_load_reg_3094) & Window_pix_8_1_load_reg_3089) & Window_pix_8_1_0355_i_load_reg_3084) & Window_pix_7_10_reg_3315) & Window_pix_7_9_load_reg_3254) & Window_pix_7_8_load_reg_3079) & Window_pix_7_7_load_reg_3074) & Window_pix_7_6_load_reg_3069) & Window_pix_7_5_load_reg_3064) & Window_pix_7_4_load_reg_3059) & Window_pix_7_3_load_reg_3054) & Window_pix_7_2_load_reg_3049) & Window_pix_7_1_load_reg_3044) & Window_pix_7_1_0345_i_load_reg_3039) & Window_pix_6_10_reg_3309) & Window_pix_6_9_load_reg_3249) & Window_pix_6_8_load_reg_3034) & Window_pix_6_7_load_reg_3029) & Window_pix_6_6_load_reg_3024) & Window_pix_6_5_load_reg_3019) & Window_pix_6_4_load_reg_3014) & Window_pix_6_3_load_reg_3009) & Window_pix_6_2_load_reg_3004) & Window_pix_6_1_load_reg_2999) & Window_pix_6_1_0335_i_load_reg_2994) & Window_pix_5_10_reg_3303) & Window_pix_5_9_load_reg_3244) & Window_pix_5_8_load_reg_2989) & Window_pix_5_7_load_reg_2984) & Window_pix_5_6_load_reg_2979) & Window_pix_5_5_load_reg_2974) & Window_pix_5_4_load_reg_2969) & Window_pix_5_3_load_reg_2964) & Window_pix_5_2_load_reg_2959) & Window_pix_5_1_load_reg_2954) & Window_pix_5_1_0325_i_load_reg_2949) & Window_pix_4_10_reg_3297) & Window_pix_4_9_load_reg_3239) & Window_pix_4_8_load_reg_2944) & Window_pix_4_7_load_reg_2939) & Window_pix_4_6_load_reg_2934) & Window_pix_4_5_load_reg_2929) & Window_pix_4_4_load_reg_2924) & Window_pix_4_3_load_reg_2919) & Window_pix_4_2_load_reg_2914) & Window_pix_4_1_load_reg_2909) & Window_pix_4_1_0315_i_load_reg_2904) & Window_pix_3_10_reg_3291) & Window_pix_3_9_load_reg_3234) & Window_pix_3_8_load_reg_2899) & Window_pix_3_7_load_reg_2894) & Window_pix_3_6_load_reg_2889) & Window_pix_3_5_load_reg_2884) & Window_pix_3_4_load_reg_2879) & Window_pix_3_3_load_reg_2874) & Window_pix_3_2_load_reg_2869) & Window_pix_3_1_load_reg_2864) & Window_pix_3_1_0305_i_load_reg_2859) & Window_pix_2_10_reg_3285) & Window_pix_2_9_load_reg_3229) & Window_pix_2_8_load_reg_2854) & Window_pix_2_7_load_reg_2849) & Window_pix_2_6_load_reg_2844) & Window_pix_2_5_load_reg_2839) & Window_pix_2_4_load_reg_2834) & Window_pix_2_3_load_reg_2829) & Window_pix_2_2_load_reg_2824) & Window_pix_2_1_load_reg_2819) & Window_pix_2_1_0295_i_load_reg_2814) & Window_pix_1_10_reg_3279) & Window_pix_1_9_load_reg_3224) & Window_pix_1_8_load_reg_2809) & Window_pix_1_7_load_reg_2804) & Window_pix_1_6_load_reg_2799) & Window_pix_1_5_load_reg_2794) & Window_pix_1_4_load_reg_2789) & Window_pix_1_3_load_reg_2784) & Window_pix_1_2_load_reg_2779) & Window_pix_1_1_load_reg_2774) & Window_pix_1_1_0285_i_load_reg_2769) & Window_pix_0_10_reg_3274) & Window_pix_0_9_load_reg_3219) & Window_pix_0_8_load_reg_2764) & Window_pix_0_7_load_reg_2759) & Window_pix_0_6_load_reg_2754) & Window_pix_0_5_load_reg_2749) & Window_pix_0_4_load_reg_2744) & Window_pix_0_3_load_reg_2739) & Window_pix_0_2_load_reg_2734) & Window_pix_0_1_load_reg_2729) & Window_pix_0_1_0275_i_load_reg_2724);

    window_stream_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln131_reg_2720_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln131_reg_2720_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            window_stream_write <= ap_const_logic_1;
        else 
            window_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln93_1_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_read_reg_2591),17));
    zext_ln93_2_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_775_p3),19));
    zext_ln93_3_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln93_fu_786_p2),19));
    zext_ln93_4_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ramp_up_reg_2612),32));
end behav;

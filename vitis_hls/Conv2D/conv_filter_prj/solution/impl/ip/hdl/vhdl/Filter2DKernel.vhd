-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter2DKernel is
generic (
    C_S_AXI_CONFIG_ADDR_WIDTH : INTEGER := 10;
    C_S_AXI_CONFIG_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_config_AWVALID : IN STD_LOGIC;
    s_axi_config_AWREADY : OUT STD_LOGIC;
    s_axi_config_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_ADDR_WIDTH-1 downto 0);
    s_axi_config_WVALID : IN STD_LOGIC;
    s_axi_config_WREADY : OUT STD_LOGIC;
    s_axi_config_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH-1 downto 0);
    s_axi_config_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH/8-1 downto 0);
    s_axi_config_ARVALID : IN STD_LOGIC;
    s_axi_config_ARREADY : OUT STD_LOGIC;
    s_axi_config_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONFIG_ADDR_WIDTH-1 downto 0);
    s_axi_config_RVALID : OUT STD_LOGIC;
    s_axi_config_RREADY : IN STD_LOGIC;
    s_axi_config_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONFIG_DATA_WIDTH-1 downto 0);
    s_axi_config_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_config_BVALID : OUT STD_LOGIC;
    s_axi_config_BREADY : IN STD_LOGIC;
    s_axi_config_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    input_stream_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    output_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_stream_V_TVALID : IN STD_LOGIC;
    input_stream_V_TREADY : OUT STD_LOGIC;
    output_stream_TVALID : OUT STD_LOGIC;
    output_stream_TREADY : IN STD_LOGIC );
end;


architecture behav of Filter2DKernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Filter2DKernel_Filter2DKernel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.239000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=258,HLS_SYN_DSP=0,HLS_SYN_FF=70410,HLS_SYN_LUT=105485,HLS_VERSION=2020_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal factor : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (15 downto 0);
    signal width : STD_LOGIC_VECTOR (15 downto 0);
    signal height : STD_LOGIC_VECTOR (15 downto 0);
    signal stride : STD_LOGIC_VECTOR (15 downto 0);
    signal coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal Filter2DKernel_entry3_U0_ap_start : STD_LOGIC;
    signal Filter2DKernel_entry3_U0_ap_done : STD_LOGIC;
    signal Filter2DKernel_entry3_U0_ap_continue : STD_LOGIC;
    signal Filter2DKernel_entry3_U0_ap_idle : STD_LOGIC;
    signal Filter2DKernel_entry3_U0_ap_ready : STD_LOGIC;
    signal Filter2DKernel_entry3_U0_start_out : STD_LOGIC;
    signal Filter2DKernel_entry3_U0_start_write : STD_LOGIC;
    signal Filter2DKernel_entry3_U0_bias_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Filter2DKernel_entry3_U0_bias_out_write : STD_LOGIC;
    signal Filter2DKernel_entry3_U0_width_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Filter2DKernel_entry3_U0_width_out_write : STD_LOGIC;
    signal Filter2DKernel_entry3_U0_height_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Filter2DKernel_entry3_U0_height_out_write : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_ap_start : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_ap_done : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_ap_continue : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_ap_idle : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_ap_ready : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_start_out : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_start_write : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_bias_read : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_width_read : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_height_read : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_bias_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Filter2DKernel_entry4_U0_bias_out_write : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_width_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Filter2DKernel_entry4_U0_width_out_write : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_width_out1_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Filter2DKernel_entry4_U0_width_out1_write : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_height_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Filter2DKernel_entry4_U0_height_out_write : STD_LOGIC;
    signal Filter2DKernel_entry4_U0_height_out2_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Filter2DKernel_entry4_U0_height_out2_write : STD_LOGIC;
    signal ReadFromMem_U0_ap_start : STD_LOGIC;
    signal ReadFromMem_U0_ap_done : STD_LOGIC;
    signal ReadFromMem_U0_ap_continue : STD_LOGIC;
    signal ReadFromMem_U0_ap_idle : STD_LOGIC;
    signal ReadFromMem_U0_ap_ready : STD_LOGIC;
    signal ReadFromMem_U0_start_out : STD_LOGIC;
    signal ReadFromMem_U0_start_write : STD_LOGIC;
    signal ReadFromMem_U0_coeffs_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ReadFromMem_U0_coeffs_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_coeff_stream5_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_coeff_stream5_write : STD_LOGIC;
    signal Window2D_U0_ap_start : STD_LOGIC;
    signal Window2D_U0_ap_done : STD_LOGIC;
    signal Window2D_U0_ap_continue : STD_LOGIC;
    signal Window2D_U0_ap_idle : STD_LOGIC;
    signal Window2D_U0_ap_ready : STD_LOGIC;
    signal Window2D_U0_input_stream_V_TREADY : STD_LOGIC;
    signal Window2D_U0_window_stream_din : STD_LOGIC_VECTOR (3871 downto 0);
    signal Window2D_U0_window_stream_write : STD_LOGIC;
    signal Window2D_U0_width_read : STD_LOGIC;
    signal Window2D_U0_height_read : STD_LOGIC;
    signal Filter2D_U0_ap_start : STD_LOGIC;
    signal Filter2D_U0_ap_done : STD_LOGIC;
    signal Filter2D_U0_ap_continue : STD_LOGIC;
    signal Filter2D_U0_ap_idle : STD_LOGIC;
    signal Filter2D_U0_ap_ready : STD_LOGIC;
    signal Filter2D_U0_coeff_stream5_read : STD_LOGIC;
    signal Filter2D_U0_window_stream_read : STD_LOGIC;
    signal Filter2D_U0_width_read : STD_LOGIC;
    signal Filter2D_U0_height_read : STD_LOGIC;
    signal Filter2D_U0_bias_read : STD_LOGIC;
    signal Filter2D_U0_output_stream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Filter2D_U0_output_stream_TVALID : STD_LOGIC;
    signal Filter2D_U0_output_stream_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_output_stream_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_output_stream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal bias_c1_full_n : STD_LOGIC;
    signal bias_c1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_c1_empty_n : STD_LOGIC;
    signal width_c2_full_n : STD_LOGIC;
    signal width_c2_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal width_c2_empty_n : STD_LOGIC;
    signal height_c3_full_n : STD_LOGIC;
    signal height_c3_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal height_c3_empty_n : STD_LOGIC;
    signal bias_c_full_n : STD_LOGIC;
    signal bias_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_c_empty_n : STD_LOGIC;
    signal width_c_full_n : STD_LOGIC;
    signal width_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal width_c_empty_n : STD_LOGIC;
    signal width_c9_full_n : STD_LOGIC;
    signal width_c9_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal width_c9_empty_n : STD_LOGIC;
    signal height_c_full_n : STD_LOGIC;
    signal height_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal height_c_empty_n : STD_LOGIC;
    signal height_c10_full_n : STD_LOGIC;
    signal height_c10_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal height_c10_empty_n : STD_LOGIC;
    signal coeff_stream_full_n : STD_LOGIC;
    signal coeff_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_stream_empty_n : STD_LOGIC;
    signal window_stream_full_n : STD_LOGIC;
    signal window_stream_dout : STD_LOGIC_VECTOR (3871 downto 0);
    signal window_stream_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Filter2DKernel_entry3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Filter2DKernel_entry3_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_ReadFromMem_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_ReadFromMem_U0_ap_ready : STD_LOGIC;
    signal start_for_Filter2DKernel_entry4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Filter2DKernel_entry4_U0_full_n : STD_LOGIC;
    signal start_for_Filter2DKernel_entry4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Filter2DKernel_entry4_U0_empty_n : STD_LOGIC;
    signal start_for_Window2D_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Window2D_U0_full_n : STD_LOGIC;
    signal start_for_Window2D_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Window2D_U0_empty_n : STD_LOGIC;
    signal start_for_Filter2D_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Filter2D_U0_full_n : STD_LOGIC;
    signal start_for_Filter2D_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Filter2D_U0_empty_n : STD_LOGIC;
    signal Window2D_U0_start_full_n : STD_LOGIC;
    signal Window2D_U0_start_write : STD_LOGIC;
    signal Filter2D_U0_start_full_n : STD_LOGIC;
    signal Filter2D_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Filter2DKernel_Filter2DKernel_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        bias : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        bias_out_full_n : IN STD_LOGIC;
        bias_out_write : OUT STD_LOGIC;
        width_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        width_out_full_n : IN STD_LOGIC;
        width_out_write : OUT STD_LOGIC;
        height_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        height_out_full_n : IN STD_LOGIC;
        height_out_write : OUT STD_LOGIC );
    end component;


    component Filter2DKernel_Filter2DKernel_entry4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        bias_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_empty_n : IN STD_LOGIC;
        bias_read : OUT STD_LOGIC;
        width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        width_empty_n : IN STD_LOGIC;
        width_read : OUT STD_LOGIC;
        height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        height_empty_n : IN STD_LOGIC;
        height_read : OUT STD_LOGIC;
        bias_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        bias_out_full_n : IN STD_LOGIC;
        bias_out_write : OUT STD_LOGIC;
        width_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        width_out_full_n : IN STD_LOGIC;
        width_out_write : OUT STD_LOGIC;
        width_out1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        width_out1_full_n : IN STD_LOGIC;
        width_out1_write : OUT STD_LOGIC;
        height_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        height_out_full_n : IN STD_LOGIC;
        height_out_write : OUT STD_LOGIC;
        height_out2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        height_out2_full_n : IN STD_LOGIC;
        height_out2_write : OUT STD_LOGIC );
    end component;


    component Filter2DKernel_ReadFromMem IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        coeffs_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        coeffs_ce0 : OUT STD_LOGIC;
        coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        coeff_stream5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        coeff_stream5_full_n : IN STD_LOGIC;
        coeff_stream5_write : OUT STD_LOGIC );
    end component;


    component Filter2DKernel_Window2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_stream_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        input_stream_V_TVALID : IN STD_LOGIC;
        input_stream_V_TREADY : OUT STD_LOGIC;
        window_stream_din : OUT STD_LOGIC_VECTOR (3871 downto 0);
        window_stream_full_n : IN STD_LOGIC;
        window_stream_write : OUT STD_LOGIC;
        width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        width_empty_n : IN STD_LOGIC;
        width_read : OUT STD_LOGIC;
        height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        height_empty_n : IN STD_LOGIC;
        height_read : OUT STD_LOGIC );
    end component;


    component Filter2DKernel_Filter2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        coeff_stream5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        coeff_stream5_empty_n : IN STD_LOGIC;
        coeff_stream5_read : OUT STD_LOGIC;
        window_stream_dout : IN STD_LOGIC_VECTOR (3871 downto 0);
        window_stream_empty_n : IN STD_LOGIC;
        window_stream_read : OUT STD_LOGIC;
        width_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        width_empty_n : IN STD_LOGIC;
        width_read : OUT STD_LOGIC;
        height_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        height_empty_n : IN STD_LOGIC;
        height_read : OUT STD_LOGIC;
        bias_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        bias_empty_n : IN STD_LOGIC;
        bias_read : OUT STD_LOGIC;
        output_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_stream_TVALID : OUT STD_LOGIC;
        output_stream_TREADY : IN STD_LOGIC;
        output_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Filter2DKernel_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_fifo_w16_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_fifo_w3872_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (3871 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (3871 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_start_for_Filter2DKernel_entry4_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_start_for_Window2D_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_start_for_Filter2D_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_config_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        factor : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (15 downto 0);
        width : OUT STD_LOGIC_VECTOR (15 downto 0);
        height : OUT STD_LOGIC_VECTOR (15 downto 0);
        stride : OUT STD_LOGIC_VECTOR (15 downto 0);
        coeffs_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        coeffs_ce0 : IN STD_LOGIC;
        coeffs_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    config_s_axi_U : component Filter2DKernel_config_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONFIG_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONFIG_DATA_WIDTH)
    port map (
        AWVALID => s_axi_config_AWVALID,
        AWREADY => s_axi_config_AWREADY,
        AWADDR => s_axi_config_AWADDR,
        WVALID => s_axi_config_WVALID,
        WREADY => s_axi_config_WREADY,
        WDATA => s_axi_config_WDATA,
        WSTRB => s_axi_config_WSTRB,
        ARVALID => s_axi_config_ARVALID,
        ARREADY => s_axi_config_ARREADY,
        ARADDR => s_axi_config_ARADDR,
        RVALID => s_axi_config_RVALID,
        RREADY => s_axi_config_RREADY,
        RDATA => s_axi_config_RDATA,
        RRESP => s_axi_config_RRESP,
        BVALID => s_axi_config_BVALID,
        BREADY => s_axi_config_BREADY,
        BRESP => s_axi_config_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        factor => factor,
        bias => bias,
        width => width,
        height => height,
        stride => stride,
        coeffs_address0 => ReadFromMem_U0_coeffs_address0,
        coeffs_ce0 => ReadFromMem_U0_coeffs_ce0,
        coeffs_q0 => coeffs_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    Filter2DKernel_entry3_U0 : component Filter2DKernel_Filter2DKernel_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Filter2DKernel_entry3_U0_ap_start,
        start_full_n => start_for_Filter2DKernel_entry4_U0_full_n,
        ap_done => Filter2DKernel_entry3_U0_ap_done,
        ap_continue => Filter2DKernel_entry3_U0_ap_continue,
        ap_idle => Filter2DKernel_entry3_U0_ap_idle,
        ap_ready => Filter2DKernel_entry3_U0_ap_ready,
        start_out => Filter2DKernel_entry3_U0_start_out,
        start_write => Filter2DKernel_entry3_U0_start_write,
        bias => bias,
        width => width,
        height => height,
        bias_out_din => Filter2DKernel_entry3_U0_bias_out_din,
        bias_out_full_n => bias_c1_full_n,
        bias_out_write => Filter2DKernel_entry3_U0_bias_out_write,
        width_out_din => Filter2DKernel_entry3_U0_width_out_din,
        width_out_full_n => width_c2_full_n,
        width_out_write => Filter2DKernel_entry3_U0_width_out_write,
        height_out_din => Filter2DKernel_entry3_U0_height_out_din,
        height_out_full_n => height_c3_full_n,
        height_out_write => Filter2DKernel_entry3_U0_height_out_write);

    Filter2DKernel_entry4_U0 : component Filter2DKernel_Filter2DKernel_entry4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Filter2DKernel_entry4_U0_ap_start,
        start_full_n => start_for_Window2D_U0_full_n,
        ap_done => Filter2DKernel_entry4_U0_ap_done,
        ap_continue => Filter2DKernel_entry4_U0_ap_continue,
        ap_idle => Filter2DKernel_entry4_U0_ap_idle,
        ap_ready => Filter2DKernel_entry4_U0_ap_ready,
        start_out => Filter2DKernel_entry4_U0_start_out,
        start_write => Filter2DKernel_entry4_U0_start_write,
        bias_dout => bias_c1_dout,
        bias_empty_n => bias_c1_empty_n,
        bias_read => Filter2DKernel_entry4_U0_bias_read,
        width_dout => width_c2_dout,
        width_empty_n => width_c2_empty_n,
        width_read => Filter2DKernel_entry4_U0_width_read,
        height_dout => height_c3_dout,
        height_empty_n => height_c3_empty_n,
        height_read => Filter2DKernel_entry4_U0_height_read,
        bias_out_din => Filter2DKernel_entry4_U0_bias_out_din,
        bias_out_full_n => bias_c_full_n,
        bias_out_write => Filter2DKernel_entry4_U0_bias_out_write,
        width_out_din => Filter2DKernel_entry4_U0_width_out_din,
        width_out_full_n => width_c_full_n,
        width_out_write => Filter2DKernel_entry4_U0_width_out_write,
        width_out1_din => Filter2DKernel_entry4_U0_width_out1_din,
        width_out1_full_n => width_c9_full_n,
        width_out1_write => Filter2DKernel_entry4_U0_width_out1_write,
        height_out_din => Filter2DKernel_entry4_U0_height_out_din,
        height_out_full_n => height_c_full_n,
        height_out_write => Filter2DKernel_entry4_U0_height_out_write,
        height_out2_din => Filter2DKernel_entry4_U0_height_out2_din,
        height_out2_full_n => height_c10_full_n,
        height_out2_write => Filter2DKernel_entry4_U0_height_out2_write);

    ReadFromMem_U0 : component Filter2DKernel_ReadFromMem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ReadFromMem_U0_ap_start,
        start_full_n => start_for_Filter2D_U0_full_n,
        ap_done => ReadFromMem_U0_ap_done,
        ap_continue => ReadFromMem_U0_ap_continue,
        ap_idle => ReadFromMem_U0_ap_idle,
        ap_ready => ReadFromMem_U0_ap_ready,
        start_out => ReadFromMem_U0_start_out,
        start_write => ReadFromMem_U0_start_write,
        coeffs_address0 => ReadFromMem_U0_coeffs_address0,
        coeffs_ce0 => ReadFromMem_U0_coeffs_ce0,
        coeffs_q0 => coeffs_q0,
        coeff_stream5_din => ReadFromMem_U0_coeff_stream5_din,
        coeff_stream5_full_n => coeff_stream_full_n,
        coeff_stream5_write => ReadFromMem_U0_coeff_stream5_write);

    Window2D_U0 : component Filter2DKernel_Window2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Window2D_U0_ap_start,
        ap_done => Window2D_U0_ap_done,
        ap_continue => Window2D_U0_ap_continue,
        ap_idle => Window2D_U0_ap_idle,
        ap_ready => Window2D_U0_ap_ready,
        input_stream_V_TDATA => input_stream_V_TDATA,
        input_stream_V_TVALID => input_stream_V_TVALID,
        input_stream_V_TREADY => Window2D_U0_input_stream_V_TREADY,
        window_stream_din => Window2D_U0_window_stream_din,
        window_stream_full_n => window_stream_full_n,
        window_stream_write => Window2D_U0_window_stream_write,
        width_dout => width_c_dout,
        width_empty_n => width_c_empty_n,
        width_read => Window2D_U0_width_read,
        height_dout => height_c_dout,
        height_empty_n => height_c_empty_n,
        height_read => Window2D_U0_height_read);

    Filter2D_U0 : component Filter2DKernel_Filter2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Filter2D_U0_ap_start,
        ap_done => Filter2D_U0_ap_done,
        ap_continue => Filter2D_U0_ap_continue,
        ap_idle => Filter2D_U0_ap_idle,
        ap_ready => Filter2D_U0_ap_ready,
        coeff_stream5_dout => coeff_stream_dout,
        coeff_stream5_empty_n => coeff_stream_empty_n,
        coeff_stream5_read => Filter2D_U0_coeff_stream5_read,
        window_stream_dout => window_stream_dout,
        window_stream_empty_n => window_stream_empty_n,
        window_stream_read => Filter2D_U0_window_stream_read,
        width_dout => width_c9_dout,
        width_empty_n => width_c9_empty_n,
        width_read => Filter2D_U0_width_read,
        height_dout => height_c10_dout,
        height_empty_n => height_c10_empty_n,
        height_read => Filter2D_U0_height_read,
        bias_dout => bias_c_dout,
        bias_empty_n => bias_c_empty_n,
        bias_read => Filter2D_U0_bias_read,
        output_stream_TDATA => Filter2D_U0_output_stream_TDATA,
        output_stream_TVALID => Filter2D_U0_output_stream_TVALID,
        output_stream_TREADY => output_stream_TREADY,
        output_stream_TKEEP => Filter2D_U0_output_stream_TKEEP,
        output_stream_TSTRB => Filter2D_U0_output_stream_TSTRB,
        output_stream_TLAST => Filter2D_U0_output_stream_TLAST);

    bias_c1_U : component Filter2DKernel_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2DKernel_entry3_U0_bias_out_din,
        if_full_n => bias_c1_full_n,
        if_write => Filter2DKernel_entry3_U0_bias_out_write,
        if_dout => bias_c1_dout,
        if_empty_n => bias_c1_empty_n,
        if_read => Filter2DKernel_entry4_U0_bias_read);

    width_c2_U : component Filter2DKernel_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2DKernel_entry3_U0_width_out_din,
        if_full_n => width_c2_full_n,
        if_write => Filter2DKernel_entry3_U0_width_out_write,
        if_dout => width_c2_dout,
        if_empty_n => width_c2_empty_n,
        if_read => Filter2DKernel_entry4_U0_width_read);

    height_c3_U : component Filter2DKernel_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2DKernel_entry3_U0_height_out_din,
        if_full_n => height_c3_full_n,
        if_write => Filter2DKernel_entry3_U0_height_out_write,
        if_dout => height_c3_dout,
        if_empty_n => height_c3_empty_n,
        if_read => Filter2DKernel_entry4_U0_height_read);

    bias_c_U : component Filter2DKernel_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2DKernel_entry4_U0_bias_out_din,
        if_full_n => bias_c_full_n,
        if_write => Filter2DKernel_entry4_U0_bias_out_write,
        if_dout => bias_c_dout,
        if_empty_n => bias_c_empty_n,
        if_read => Filter2D_U0_bias_read);

    width_c_U : component Filter2DKernel_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2DKernel_entry4_U0_width_out_din,
        if_full_n => width_c_full_n,
        if_write => Filter2DKernel_entry4_U0_width_out_write,
        if_dout => width_c_dout,
        if_empty_n => width_c_empty_n,
        if_read => Window2D_U0_width_read);

    width_c9_U : component Filter2DKernel_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2DKernel_entry4_U0_width_out1_din,
        if_full_n => width_c9_full_n,
        if_write => Filter2DKernel_entry4_U0_width_out1_write,
        if_dout => width_c9_dout,
        if_empty_n => width_c9_empty_n,
        if_read => Filter2D_U0_width_read);

    height_c_U : component Filter2DKernel_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2DKernel_entry4_U0_height_out_din,
        if_full_n => height_c_full_n,
        if_write => Filter2DKernel_entry4_U0_height_out_write,
        if_dout => height_c_dout,
        if_empty_n => height_c_empty_n,
        if_read => Window2D_U0_height_read);

    height_c10_U : component Filter2DKernel_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2DKernel_entry4_U0_height_out2_din,
        if_full_n => height_c10_full_n,
        if_write => Filter2DKernel_entry4_U0_height_out2_write,
        if_dout => height_c10_dout,
        if_empty_n => height_c10_empty_n,
        if_read => Filter2D_U0_height_read);

    coeff_stream_U : component Filter2DKernel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_coeff_stream5_din,
        if_full_n => coeff_stream_full_n,
        if_write => ReadFromMem_U0_coeff_stream5_write,
        if_dout => coeff_stream_dout,
        if_empty_n => coeff_stream_empty_n,
        if_read => Filter2D_U0_coeff_stream5_read);

    window_stream_U : component Filter2DKernel_fifo_w3872_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Window2D_U0_window_stream_din,
        if_full_n => window_stream_full_n,
        if_write => Window2D_U0_window_stream_write,
        if_dout => window_stream_dout,
        if_empty_n => window_stream_empty_n,
        if_read => Filter2D_U0_window_stream_read);

    start_for_Filter2DKernel_entry4_U0_U : component Filter2DKernel_start_for_Filter2DKernel_entry4_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Filter2DKernel_entry4_U0_din,
        if_full_n => start_for_Filter2DKernel_entry4_U0_full_n,
        if_write => Filter2DKernel_entry3_U0_start_write,
        if_dout => start_for_Filter2DKernel_entry4_U0_dout,
        if_empty_n => start_for_Filter2DKernel_entry4_U0_empty_n,
        if_read => Filter2DKernel_entry4_U0_ap_ready);

    start_for_Window2D_U0_U : component Filter2DKernel_start_for_Window2D_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Window2D_U0_din,
        if_full_n => start_for_Window2D_U0_full_n,
        if_write => Filter2DKernel_entry4_U0_start_write,
        if_dout => start_for_Window2D_U0_dout,
        if_empty_n => start_for_Window2D_U0_empty_n,
        if_read => Window2D_U0_ap_ready);

    start_for_Filter2D_U0_U : component Filter2DKernel_start_for_Filter2D_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Filter2D_U0_din,
        if_full_n => start_for_Filter2D_U0_full_n,
        if_write => ReadFromMem_U0_start_write,
        if_dout => start_for_Filter2D_U0_dout,
        if_empty_n => start_for_Filter2D_U0_empty_n,
        if_read => Filter2D_U0_ap_ready);





    ap_sync_reg_Filter2DKernel_entry3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Filter2DKernel_entry3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Filter2DKernel_entry3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Filter2DKernel_entry3_U0_ap_ready <= ap_sync_Filter2DKernel_entry3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_ReadFromMem_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_ReadFromMem_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_ReadFromMem_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_ReadFromMem_U0_ap_ready <= ap_sync_ReadFromMem_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Filter2DKernel_entry3_U0_ap_continue <= ap_const_logic_1;
    Filter2DKernel_entry3_U0_ap_start <= ((ap_sync_reg_Filter2DKernel_entry3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Filter2DKernel_entry4_U0_ap_continue <= ap_const_logic_1;
    Filter2DKernel_entry4_U0_ap_start <= start_for_Filter2DKernel_entry4_U0_empty_n;
    Filter2D_U0_ap_continue <= ap_const_logic_1;
    Filter2D_U0_ap_start <= start_for_Filter2D_U0_empty_n;
    Filter2D_U0_start_full_n <= ap_const_logic_1;
    Filter2D_U0_start_write <= ap_const_logic_0;
    ReadFromMem_U0_ap_continue <= ap_const_logic_1;
    ReadFromMem_U0_ap_start <= ((ap_sync_reg_ReadFromMem_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Window2D_U0_ap_continue <= ap_const_logic_1;
    Window2D_U0_ap_start <= start_for_Window2D_U0_empty_n;
    Window2D_U0_start_full_n <= ap_const_logic_1;
    Window2D_U0_start_write <= ap_const_logic_0;
    ap_done <= Filter2D_U0_ap_done;
    ap_idle <= (Window2D_U0_ap_idle and ReadFromMem_U0_ap_idle and Filter2D_U0_ap_idle and Filter2DKernel_entry4_U0_ap_idle and Filter2DKernel_entry3_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Filter2DKernel_entry3_U0_ap_ready <= (ap_sync_reg_Filter2DKernel_entry3_U0_ap_ready or Filter2DKernel_entry3_U0_ap_ready);
    ap_sync_ReadFromMem_U0_ap_ready <= (ap_sync_reg_ReadFromMem_U0_ap_ready or ReadFromMem_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Filter2D_U0_ap_done;
    ap_sync_ready <= (ap_sync_ReadFromMem_U0_ap_ready and ap_sync_Filter2DKernel_entry3_U0_ap_ready);
    input_stream_V_TREADY <= Window2D_U0_input_stream_V_TREADY;
    output_stream_TDATA <= Filter2D_U0_output_stream_TDATA;
    output_stream_TKEEP <= Filter2D_U0_output_stream_TKEEP;
    output_stream_TLAST <= Filter2D_U0_output_stream_TLAST;
    output_stream_TSTRB <= Filter2D_U0_output_stream_TSTRB;
    output_stream_TVALID <= Filter2D_U0_output_stream_TVALID;
    start_for_Filter2DKernel_entry4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Filter2D_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Window2D_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
